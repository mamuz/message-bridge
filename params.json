{"name":"Message-bridge","tagline":"Message bridge to support a decoupled event driven and aspect oriented application","body":"Message Bridge let you trigger messages from anywhere in a procedural or in an object-oriented way.\r\nA registered callback can dispatch or forward all triggered messages.\r\nMain idea is to support a decoupled event driven and aspect oriented application, thus object awareness to any\r\nlogger or any event dispatcher is not needed anymore.\r\n\r\n## Installation\r\n\r\nThe recommended way to install\r\n[`mamuz/message-bridge`](https://packagist.org/packages/mamuz/message-bridge) is via\r\n[composer](http://getcomposer.org/):\r\n\r\n```sh\r\nphp composer.phar require mamuz/message-bridge:0.*\r\n```\r\n\r\n## Example\r\n\r\n### Procedural\r\n\r\n```php\r\n// Register dispatch callback globally\r\nset_message_dispatcher(function ($msg, $argv, $emitter) {\r\n    if ($msg == 'user.registered') {\r\n        mail('foo@bar.com', 'A new user entered', 'UserId ' . $argv['userId']);\r\n    }\r\n});\r\n\r\n// Trigger any message anywhere\r\ntrigger_message('user.registered', array('userId' => 1234));\r\n```\r\n\r\n### Object oriented way with forwarding\r\n\r\n```php\r\n$bridge = \\MsgBridge\\MessageBridge::getInstance();\r\n$bridge->bindDispatcher(function ($msg, $argv, $emitter) use ($eventManager) {\r\n    $eventManager->trigger($msg, $argv, $emitter);\r\n});\r\n\r\n// ...\r\n\r\n$bridge->trigger('user.registered', array('userId' => 1234));\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}