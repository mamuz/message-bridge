{"name":"Message-bridge","tagline":"Message bridge to support a decoupled event driven and aspect oriented application","body":"Message Bridge\r\n=================\r\n\r\n[![Author](http://img.shields.io/badge/author-@mamuz_de-blue.svg?style=flat-square)](https://twitter.com/mamuz_de)\r\n[![Build Status](https://img.shields.io/travis/mamuz/message-bridge.svg?style=flat-square)](https://travis-ci.org/mamuz/message-bridge)\r\n[![Latest Stable Version](https://img.shields.io/packagist/v/mamuz/message-bridge.svg?style=flat-square)](https://packagist.org/packages/mamuz/message-bridge)\r\n[![Total Downloads](https://img.shields.io/packagist/dt/mamuz/message-bridge.svg?style=flat-square)](https://packagist.org/packages/mamuz/message-bridge)\r\n[![License](https://img.shields.io/packagist/l/mamuz/message-bridge.svg?style=flat-square)](https://packagist.org/packages/mamuz/message-bridge)\r\n\r\nMessage Bridge let you trigger messages from anywhere in a procedural or in an object-oriented way.\r\nA registered callback can dispatch or forward all triggered messages.\r\nMain idea is to support a decoupled event driven and aspect oriented application, thus object awareness to any\r\nlogger or any event dispatcher is not needed anymore.\r\n\r\n## Installation\r\n\r\nThe recommended way to install\r\n[`mamuz/message-bridge`](https://packagist.org/packages/mamuz/message-bridge) is via\r\n[composer](http://getcomposer.org/):\r\n\r\n```sh\r\nphp composer.phar require mamuz/message-bridge:0.*\r\n```\r\n\r\n## Example\r\n\r\n### Procedural\r\n\r\n```php\r\n// Register dispatch callback globally\r\nset_message_dispatcher(function ($msg, $argv, $emitter) {\r\n    if ($msg == 'user.registered') {\r\n        mail('foo@bar.com', 'A new user entered', 'UserId ' . $argv['userId']);\r\n    }\r\n});\r\n\r\n// Trigger any message anywhere\r\ntrigger_message('user.registered', array('userId' => 1234));\r\n```\r\n\r\n### Object oriented way with forwarding\r\n\r\n```php\r\n$bridge = \\MsgBridge\\MessageBridge::getInstance();\r\n$bridge->bindDispatcher(function ($msg, $argv, $emitter) use ($eventManager) {\r\n    $eventManager->trigger($msg, $argv, $emitter);\r\n});\r\n\r\n// ...\r\n\r\n$bridge->trigger('user.registered', array('userId' => 1234));\r\n```\r\n\r\n## Locking concept and Test Isolation\r\n\r\nTo prevent side-effects the dispatcher can be registered with write protection.\r\n\r\n```php\r\n$locked = true;\r\nset_message_dispatcher($closure, $locked);\r\n\r\n// This will throw a RuntimeException now\r\nset_message_dispatcher($anotherClosure);\r\n```\r\n\r\nIn Unit Tests you should not register a dispatcher with write protection,\r\notherwise test isolation is not given.\r\nInstead of that implement following snippet to the tearDown method.\r\n\r\n```php\r\npublic function tearDown()\r\n{\r\n    \\MsgBridge\\MessageBridge::getInstance()->unsetDispatcher();\r\n}\r\n```\r\n\r\nAs an alternative you can add the provided TestListener to your phpunit.xml.\r\nThis Listener will do the job for you automaticly.\r\n\r\n```xml\r\n<phpunit>\r\n    <listeners>\r\n        <listener class=\"\\MsgBridge\\TestListener\"></listener>\r\n    </listeners>\r\n</phpunit>\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}